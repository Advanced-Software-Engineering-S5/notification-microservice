openapi: 3.0.1
info:
  title: Notification Service API
  description: Notification Service from GoOutSafe with Microservices, by team S5
  version: "0.1"
servers:
- url: /
paths:
  /notifications/user/{user_id}:
    get:
      tags:
      - User Notifications
      summary: Get all notifications of the user specified by user_id.
      operationId: notification_microservice.classes.notifications_fetch.fetch_user_notifications
      parameters:
      - name: user_id
        in: path
        description: User's Unique identifier
        required: true
        schema:
          pattern: ^[a-zA-Z0-9-]+$
          type: string
      - name: unread_only
        in: query
        description: Whether to retrieve only unread notifications or not
        required: false
        schema:
          default: false
          type: boolean
      responses:
        200:
          description: Returns the array of notifications objects 
          content:
            application/json:
              schema:
                type: object
                properties:
                  notifications:
                    type: array
                    items:
                      $ref: '#/components/schemas/Notification'
  /notifications/restaurant/{restaurant_id}:
    get:
      tags:
      - Restaurant Notifications
      summary: Retrieves all notifications involving the restaurant specified by restaurant_id.
      operationId: notification_microservice.classes.notifications_fetch.fetch_operator_notifications
      parameters:
      - name: restaurant_id
        in: path
        description: Restaurant's Unique identifier
        required: true
        schema:
          pattern: ^[a-zA-Z0-9-]+$
          type: string
      - name: unread_only
        in: query
        description: Whether to retrieve only unread notifications or not.
        required: false
        schema:
          default: false
          type: boolean
      responses:
        200:
          description: Returns the array of notifications objects.
          content:
            application/json:
              schema:
                type: object
                properties:
                  notifications:
                    type: array
                    items:
                      $ref: '#/components/schemas/Notification'
  /notifications/{notification_id}:
    get:
      tags:
      - Notification
      summary: Get notification specified by the id `notification_id`.
      operationId: notification_microservice.classes.notifications_fetch.getAndSetNotification
      parameters:
      - name: notification_id
        in: path
        description: Notification's Unique identifier
        required: true
        schema:
          pattern: ^[a-zA-Z0-9-]+$
          type: string
      responses:
        200:
          description: Returns the notification with id=notification_id and marks the notification as `read`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
        404:
          description: Requested notification does not exist.
          content: {}
  /notifications/contact_tracing/{user_id}:
      get:
        tags:
        - Generate notifications.
        summary: Starts the contact tracing background task generating notifications.
        operationId: notification_microservice.classes.start_background_task.new_positive_case
        parameters:
        - name: user_id
          in: path
          description: Unique identifier of the user marked as positive.
          required: true
          schema:
            pattern: ^[a-zA-Z0-9-]+$
            type: string
        - name: incubation_period
          in: query
          description: Number of days to check for contacts between positive user and other customers. Defaults to 14.
          required: false
          schema:
            type: integer
        responses:
          200:
            description: Task scheduled correctly
            content: {}
          500:
            description: Error scheduling task.
            content: {}
components:
  schemas:
    Notification:
      type: object
      properties:
        id:
          type: integer
        date:
          type: string
          format: date-time
        user_id:
          type: integer
        notification_checked:
          type: boolean
        restaurant_id:
          type: integer
        restaurant:
          type: object
          properties:
            id:
              type: integer
              description: Unique identifier
              readOnly: true
              example: 123
            name:
              maxLength: 100
              minLength: 1
              type: string
              description: Restaurant's name
              example: "My Pizza Restaurant"
            avg_stars:
              type: number
              description: Average ratings of the review associated to the restaurant
              example: 3.4
            num_reviews:
              type: integer
              description: Number of reviews associated to the restaurant
              example: 33
            lat:
              type: number
              description: Restaurant Latitude
              example: 42.42
            lon:
              type: number
              description: Restaurant Longitude
              example: 42.42
            phone:
              type: string
              minLength: 5
              maxLength: 50
              description: Restaurant Phone Number
              example: "050123456"
       
  